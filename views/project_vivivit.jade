div.column-no-gutter.small-12.medium-12.large-12
  div.column-no-gutter.small-12.large-12.project-cover-container
    img.project-cover(src="/images/project_vivivit_cover.jpg").float-center
    p.img-caption Be like a japanese, be like Vivivit
    
  div.column.project_container
    div.column.small-12.large-12.collapsible(data-collapsed="collapse")
      h3 Vivivit - Tokyo, Japan
      p I have been dreaming to work in Japan since my high school. Shortly after I graduated from my lovely Startup, I joined <strong>Vivivit</strong> <abbr>株式会社ビビビット</abbr> as an intern iOS mobile developer and started working in Tokyo Japan.
      p Working in Japan is an entire new experience for me - the culture, environment, and <em>people</em>. 
      
      p Vivivit is a fast-growing job hunting service based in Tokyo, it took me quite a bit of time to understand the idea of <em>tenshoku (転職) </em>culture in Japan. Trust me, switching job is not as easy as if in Hong Kong and U.S.
      p The challenges head-on is to build a native iOS solution for current web services which is used by hundreds of local business and students, with an urgent request that their competior - <strong>Wantedly</strong>, has already shipped
        | an iOS app that is of fairly high quality grasping noticable business impact.
      
      p I understand the importance of this project and believe in heart that it will not be simple as making a workable iOS solution could even make an impact. Before the hands-on development,
        | I spend literally few whole days to study the Wantedly apps - understand their pros and cons, performance, UI/UX, typography, navigation logic - like every single details could not be missed.
        | Building an app for a different culture is not as easy as I imagine.
      p.quote Users think in a completely different way across cultures.
      
      p Performane was also a big challenge - I don't want to build something that runs noticeably slow then competitor's one, and they are actually doing great.
        br
        | To secure the performance, while maintaining a quite complex layout, built-in mechanism from <strong>UIKit</strong> doesn't seem to be efficient enough.
      p I proposed a solution using <strong>AsyncDisplayKit</strong>, developed by Facebook and Pinterest, to tackle to performance challenge. It turns out to be
        | a great success in which UI performance is speed up drastically, while performance boost is not the only advantage from adopting Async-rendering,
        | <strong>AsyncDisplayKit</strong> also offer an truly awesome Layout tools, as compared to native NSAutoLayout, benefiting both the performance and ease of development.
        | Layout elements have never been so reusable, flexable (everything is dynamic height!!) and extensible with such promising performance. It comes with a relatively deep learning curve, inevitably, but what
        | it returns are with no doubts worth spending a day or two to study a new way for managing views in iOS.
      
    div.column-flex.small-12.collapsible-control.align-right
      button.button(type="button").pin Read more...
    br
    div.column.small-12
    <div class="css-device css-device--mobile">
    <img class="css-device__image" src="images/vivivit_screen_1.png">
    </div>
    br
      
    div.column.small-12
      span.secondary.label iOS
      span.secondary.label Swift
      span.secondary.label AsyncDisplayKit
      span.secondary.label Japan
